// 7 methods below
// input: 0@ 1@ 2@ xyz world coordinates
// output: 0@ 1@ xy screen coordinates (640x448)

/********************************/
// 1: call

0AC6: 6@ = label @PCOORDS offset
0A8C: write_memory 6@ size 4 value 0@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 1@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 2@ vp 0

// http://gtaforums.com/topic/447870-draw-texts-above-actors-like-in-sa-mp/?p=1060058458
0AC6: 3@ = label @PMULTY offset
0AC6: 4@ = label @PMULTX offset
0AC6: 5@ = label @PSCREEN offset
0AC6: 6@ = label @PCOORDS offset

// keep farclip & nearclip at 0, or it will mess up when looking the other direction
0AA5: call 0x70CE30 num_params 6 pop 6 bFarClip 0 bNearClip 0 pMultY 3@ pMultX 4@ pScreen=x,y 5@ pCoords=x,y,z 6@ 

0A8D: 0@ = read_memory 5@ size 4 vp 0 // result x (float)
000A: 5@ += 4 // l+=i (int)
0A8D: 1@ = read_memory 5@ size 4 vp 0 // result y (float) 
000A: 5@ += 4 // l+=i (int)
0A8D: 2@ = read_memory 5@ size 4 vp 0 // result z (float)
// not on screen if 2@ is negative

0013: 0@ *= 640.0 // l*=i (float) // screen canvas width (float)
0013: 1@ *= 448.0 // l*=i (float) // screen canvas height (float)

0A8D: 3@ = read_memory 0xC17044  size 4 vp 0 // screen res x (int)
0A8D: 4@ = read_memory 0xC17048  size 4 vp 0 // screen res y (int)

0093: 3@ = integer 3@ to_float // lfildl
0093: 4@ = integer 4@ to_float // lfildl

0073: 0@ /= 3@ // l/=l (float)
0073: 1@ /= 4@ // l/=l (float)

/********************************/
// 2: call (transformonly)

0AC6: 6@ = label @PCOORDS offset
0A8C: write_memory 6@ size 4 value 0@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 1@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 2@ vp 0

0AC6: 5@ = label @PSCREEN offset
0AC6: 6@ = label @PCOORDS offset

0AA5: call 0x59C890 num_params 3 pop 3 in 6@ matrix 0xB6FA2C out 5@ 

0A8D: 0@ = read_memory 5@ size 4 vp 0 // result x (float)
000A: 5@ += 4 // l+=i (int)
0A8D: 1@ = read_memory 5@ size 4 vp 0 // result y (float)
000A: 5@ += 4 // l+=i (int)
0A8D: 2@ = read_memory 5@ size 4 vp 0 // result z (float)
// not on screen if 2@ is negative

0007: 3@ = 1.0 // l=i (float)
0073: 3@ /= 2@ // l/=l (float)
006B: 0@ *= 3@  // l*=l (float)
0013: 0@ *= 640.0 // l*=i (float)
006B: 1@ *= 3@  // l*=l (float)
0013: 1@ *= 448.0 // l*=i (float)

/********************************/
// 3: call (same as 1 but without near/far 'clip' options on 1 (= you don't want this))

0AC6: 6@ = label @PCOORDS offset
0A8C: write_memory 6@ size 4 value 0@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 1@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 2@ vp 0

0AC6: 3@ = label @PMULTY offset
0AC6: 4@ = label @PMULTX offset
0AC6: 5@ = label @PSCREEN offset
0AC6: 6@ = label @PCOORDS offset

0AA5: call 0x71DA00 num_params 4 pop 4 3@ 4@ in 5@ out 6@ 

0A8D: 0@ = read_memory 5@ size 4 vp 0 // result x (float)
000A: 5@ += 4 // l+=i (int)
0A8D: 1@ = read_memory 5@ size 4 vp 0 // result y (float)

0013: 0@ *= 640.0 // l*=i (float) // screen canvas width (float)
0013: 1@ *= 448.0 // l*=i (float) // screen canvas height (float)

0A8D: 2@ = read_memory 0xC17044  size 4 vp 0 // screen res x (int)
0A8D: 3@ = read_memory 0xC17048  size 4 vp 0 // screen res y (int)

0093: 2@ = integer 2@ to_float // lfildl
0093: 3@ = integer 3@ to_float // lfildl

0073: 0@ /= 2@ // l/=l (float)
0073: 1@ /= 3@ // l/=l (float)

/********************************/
// 4: manually (CAMERAVIEWMATRIX 0xB6FA2C)
/*
// x = _x * _11 + _y * _21 + _z * _31 + 1 * _41
0007: 10@ = 0.0 // l=i (float)

0087: 3@ = 0@ // l=l (float)
0A8D: 4@ = read_memory 0xB6FA2C size 4 vp 0 // _11
006B: 3@ *= 4@ // l*=l (float)
005B: 10@ += 3@  // l+=l (float)

0087: 3@ = 1@ // l=l (float)
0A8D: 4@ = read_memory 0xB6FA3C size 4 vp 0 // _21
006B: 3@ *= 4@ // l*=l (float)
005B: 10@ += 3@  // l+=l (float)

0087: 3@ = 2@ // l=l (float)
0A8D: 4@ = read_memory 0xB6FA4C size 4 vp 0 // _31
006B: 3@ *= 4@ // l*=l (float)
005B: 10@ += 3@  // l+=l (float)

0A8D: 4@ = read_memory 0xB6FA5C size 4 vp 0 // _41
005B: 10@ += 4@  // l+=l (float)

// y = _x * _12 + _y * _22 + _z * _32 + 1 * _42
0007: 11@ = 0.0 // l=i (float)

0087: 3@ = 0@ // l=l (float)
0A8D: 4@ = read_memory 0xB6FA30 size 4 vp 0 // _12
006B: 3@ *= 4@ // l*=l (float)
005B: 11@ += 3@  // l+=l (float)

0087: 3@ = 1@ // l=l (float)
0A8D: 4@ = read_memory 0xB6FA40 size 4 vp 0 // _22
006B: 3@ *= 4@ // l*=l (float)
005B: 11@ += 3@  // l+=l (float)  

0087: 3@ = 2@ // l=l (float)
0A8D: 4@ = read_memory 0xB6FA50 size 4 vp 0 // _32
006B: 3@ *= 4@ // l*=l (float)
005B: 11@ += 3@  // l+=l (float)
                                  
0A8D: 4@ = read_memory 0xB6FA60 size 4 vp 0 // _42
005B: 11@ += 4@  // l+=l (float)

// z = _x * _13 + _y * _23 + _z * _33 + 1 * _43
0007: 12@ = 0.0 // l=i (float)

0087: 3@ = 0@ // l=l (float)
0A8D: 4@ = read_memory 0xB6FA34 size 4 vp 0 // _13
006B: 3@ *= 4@ // l*=l (float)
005B: 12@ += 3@  // l+=l (float)

0087: 3@ = 1@ // l=l (float)
0A8D: 4@ = read_memory 0xB6FA44 size 4 vp 0 // _23
006B: 3@ *= 4@ // l*=l (float)
005B: 12@ += 3@  // l+=l (float)

0087: 3@ = 2@ // l=l (float)
0A8D: 4@ = read_memory 0xB6FA54 size 4 vp 0 // _33
006B: 3@ *= 4@ // l*=l (float)
005B: 12@ += 3@  // l+=l (float)

0A8D: 4@ = read_memory 0xB6FA64 size 4 vp 0 // _43
005B: 12@ += 4@  // l+=l (float)

// x *= 640.0 / z
// y *= 448.0 / z
0007: 0@ = 640.0 // l=i (float)
0007: 1@ = 448.0 // l=i (float) 

006B: 0@ *= 10@ // l*=l (float)
006B: 1@ *= 11@ // l*=l (float)

0073: 0@ /= 12@ // l/=l (float)
0073: 1@ /= 12@ // l/=l (float)
*/
/********************************/     
// 5: manually w arrays (CAMERAVIEWMATRIX 0xB6FA2C)
/*
0006: 21@ = 0xB6FA2C // l=i (int)
for 20@ = 0 to 2

    0007: 10@(20@,1i) = 0.0 // l=i (float)

    0087: 3@ = 0@ // l=l (float)
    0A8D: 4@ = read_memory 21@ size 4 vp 0 // _11/_12/_13
    006B: 3@ *= 4@ // l*=l (float)
    000A: 21@ += 0x10 // l+=i (int)
    005B: 10@(20@,1i) += 3@  // l+=l (float)
    
    0087: 3@ = 1@ // l=l (float)
    0A8D: 4@ = read_memory 21@ size 4 vp 0 // _21/_22/_23
    006B: 3@ *= 4@ // l*=l (float)
    000A: 21@ += 0x10 // l+=i (int)
    005B: 10@(20@,1i) += 3@  // l+=l (float)
    
    0087: 3@ = 2@ // l=l (float)
    0A8D: 4@ = read_memory 21@ size 4 vp 0 // _31/_32/_33
    006B: 3@ *= 4@ // l*=l (float)
    000A: 21@ += 0x10 // l+=i (int)
    005B: 10@(20@,1i) += 3@  // l+=l (float)
    
    0A8D: 4@ = read_memory 21@ size 4 vp 0 // _41/_42/_43
    000E: 21@ -= 0x2C // l-=i (int)
    005B: 10@(20@,1i) += 4@  // l+=l (float)
end

// x *= 640.0 / z
// y *= 448.0 / z
0007: 0@ = 640.0 // l=i (float)
0007: 1@ = 448.0 // l=i (float) 

006B: 0@ *= 10@ // l*=l (float)
006B: 1@ *= 11@ // l*=l (float)

0073: 0@ /= 12@ // l/=l (float)
0073: 1@ /= 12@ // l/=l (float)
*/
/********************************/     
// 6: manually w more arrays (CAMERAVIEWMATRIX 0xB6FA2C)

0006: 21@ = 0xB6FA2C // l=i (int)
for 20@ = 0 to 2

    0007: 10@(20@,1i) = 0.0 // l=i (float)

    for 22@ = 0 to 2
        0087: 3@ = 0@(22@,1i) // l=l (float)
        0A8D: 4@ = read_memory 21@ size 4 vp 0 // _11/_12/_13 _21/_22/_23 _31/_32/_33
        006B: 3@ *= 4@ // l*=l (float)
        000A: 21@ += 0x10 // l+=i (int)
        005B: 10@(20@,1i) += 3@  // l+=l (float)
    end
    
    0A8D: 4@ = read_memory 21@ size 4 vp 0 // _41/_42/_43
    000E: 21@ -= 0x2C // l-=i (int)
    005B: 10@(20@,1i) += 4@  // l+=l (float)

end

// x *= 640.0 / z
// y *= 448.0 / z
0007: 0@ = 640.0 // l=i (float)
0007: 1@ = 448.0 // l=i (float) 

006B: 0@ *= 10@ // l*=l (float)
006B: 1@ *= 11@ // l*=l (float)

0073: 0@ /= 12@ // l/=l (float)
0073: 1@ /= 12@ // l/=l (float)

/********************************/
// 7: manually w adma (no CLEO needed) (CAMERAVIEWMATRIX 0xB6FA2C)

0006: 21@ = 0xB6FA2C // l=i (int)
for 20@ = 0 to 2

    0007: 10@(20@,1i) = 0.0 // l=i (float)

    for 22@ = 0 to 2
        0087: 3@ = 0@(22@,1i) // l=l (float)
        0085: 4@ = 21@ // l=l (int)
        000E: 4@ -= 0xA49960  // l-=i (int)
        0016: 4@ /= 4 // l/=i (int)
        006B: 3@ *= &0(4@,1i) // l*=g (float)
        000A: 21@ += 0x10 // l+=i (int)
        005B: 10@(20@,1i) += 3@  // l+=l (float)
    end
    
    0085: 4@ = 21@ // l=l (int)
    000E: 4@ -= 0xA49960  // l-=i (int)
    0016: 4@ /= 4 // l/=i (int)
    000E: 21@ -= 0x2C // l-=i (int)
    005B: 10@(20@,1i) += &0(4@,1i)  // l+=l (float)

end

// x *= 640.0 / z
// y *= 448.0 / z
0007: 0@ = 640.0 // l=i (float)
0007: 1@ = 448.0 // l=i (float) 

006B: 0@ *= 10@ // l*=l (float)
006B: 1@ *= 11@ // l*=l (float)

0073: 0@ /= 12@ // l/=l (float)
0073: 1@ /= 12@ // l/=l (float)

/********************************/

:PMULTY
hex
00 00 00 00
end

:PMULTX
hex
00 00 00 00
end

:PSCREEN
hex
00 00 00 00
00 00 00 00
00 00 00 00
end

:PCOORDS
hex
00 00 00 00
00 00 00 00
00 00 00 00
end
