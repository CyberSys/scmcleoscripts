// 3 methods below
// input: 0@ 1@ 2@ xyz world coordinates
// output: 0@ 1@ xy screen coordinates (640x448)

/********************************/
// 1: call

0AC6: 6@ = label @PCOORDS offset
0A8C: write_memory 6@ size 4 value 0@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 1@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 2@ vp 0

// http://gtaforums.com/topic/447870-draw-texts-above-actors-like-in-sa-mp/?p=1060058458
0AC6: 3@ = label @PMULTY offset
0AC6: 4@ = label @PMULTX offset
0AC6: 5@ = label @PSCREEN offset
0AC6: 6@ = label @PCOORDS offset

// farclip seems to mess up things when you get far away from it
0AA5: call 0x70CE30 num_params 6 pop 6 bFarClip 0 bNearClip 0 pMultY 3@ pMultX 4@ pScreen=x,y 5@ pCoords=x,y,z 6@ 

0A8D: 0@ = read_memory 5@ size 4 vp 0 // result x (float)
000A: 5@ += 4 // l+=i (int)
0A8D: 1@ = read_memory 5@ size 4 vp 0 // result y (float) 
000A: 5@ += 4 // l+=i (int)
0A8D: 2@ = read_memory 5@ size 4 vp 0 // result z (float)
// not on screen if 2@ is negative

0013: 0@ *= 640.0 // l*=i (float) // screen canvas width (float)
0013: 1@ *= 448.0 // l*=i (float) // screen canvas height (float)

0A8D: 3@ = read_memory 0xC17044  size 4 vp 0 // screen res x (int)
0A8D: 4@ = read_memory 0xC17048  size 4 vp 0 // screen res y (int)

0093: 3@ = integer 3@ to_float // lfildl
0093: 4@ = integer 4@ to_float // lfildl

0073: 0@ /= 3@ // l/=l (float)
0073: 1@ /= 4@ // l/=l (float)

/********************************/
// 2: call (transformonly)

0AC6: 6@ = label @PCOORDS offset
0A8C: write_memory 6@ size 4 value 0@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 1@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 2@ vp 0

0AC6: 5@ = label @PSCREEN offset
0AC6: 6@ = label @PCOORDS offset

0AA5: call 0x59C890 num_params 3 pop 3 in 6@ matrix 0xB6FA2C out 5@ 

0A8D: 0@ = read_memory 5@ size 4 vp 0 // result x (float)
000A: 5@ += 4 // l+=i (int)
0A8D: 1@ = read_memory 5@ size 4 vp 0 // result y (float)
000A: 5@ += 4 // l+=i (int)
0A8D: 2@ = read_memory 5@ size 4 vp 0 // result z (float)
// not on screen if 2@ is negative

0007: 3@ = 1.0 // l=i (float)
0073: 3@ /= 2@ // l/=l (float)
006B: 0@ *= 3@  // l*=l (float)
0013: 0@ *= 640.0 // l*=i (float)
006B: 1@ *= 3@  // l*=l (float)
0013: 1@ *= 448.0 // l*=i (float)

/********************************/
// 3: call (same as 1 but without near/far 'clip' options)

0AC6: 6@ = label @PCOORDS offset
0A8C: write_memory 6@ size 4 value 0@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 1@ vp 0
000A: 6@ += 4 // l+=i (int)
0A8C: write_memory 6@ size 4 value 2@ vp 0

0AC6: 3@ = label @PMULTY offset
0AC6: 4@ = label @PMULTX offset
0AC6: 5@ = label @PSCREEN offset
0AC6: 6@ = label @PCOORDS offset

0AA5: call 0x71DA00 num_params 4 pop 4 3@ 4@ in 5@ out 6@ 

0A8D: 0@ = read_memory 5@ size 4 vp 0 // result x (float)
000A: 5@ += 4 // l+=i (int)
0A8D: 1@ = read_memory 5@ size 4 vp 0 // result y (float)

0013: 0@ *= 640.0 // l*=i (float) // screen canvas width (float)
0013: 1@ *= 448.0 // l*=i (float) // screen canvas height (float)

0A8D: 2@ = read_memory 0xC17044  size 4 vp 0 // screen res x (int)
0A8D: 3@ = read_memory 0xC17048  size 4 vp 0 // screen res y (int)

0093: 2@ = integer 2@ to_float // lfildl
0093: 3@ = integer 3@ to_float // lfildl

0073: 0@ /= 2@ // l/=l (float)
0073: 1@ /= 3@ // l/=l (float)

/********************************/
