{$CLEO}
{$NOSOURCE}

03A4: name_thread 'PICKUPR' 

const
    PLAYA_X = 13@
    PLAYA_Y = 14@   
    PLAYA_Z = 15@
    DISTANCE = 16@
    PTR = 17@
    TEMP1 = 31@
    TEMP2 = 32@
    TEMP3 = 33@
end

03F0: enable_text_draw 1

:MAIN_LOOP
wait 0

00A0: store_actor $PLAYER_ACTOR position_to PLAYA_X PLAYA_Y PLAYA_Z

// read pickups stuff
0006: PTR = 0x9788C0
:DO_PICKUP
0085: TEMP1 = PTR // (int)
000A: TEMP1 += 0x1C // type
0A8D: TEMP1 = read_memory TEMP1 size 1 vp 0 
00D6: if and
8039:   not TEMP1 == 0 // l==i (int)
8039:   not TEMP1 == 15 // l==i (int)
004D: jump_if_false @NEXT_PICKUP  
0085: TEMP1 = PTR // (int)
000A: TEMP1 += 0xE // X - 0x2
0050: gosub @READ_TEMP1_SIGNEXT_STORETO_TEMP2
0087: 0@ = TEMP2 // (float)
0050: gosub @READ_TEMP1_SIGNEXT_STORETO_TEMP2
0087: 1@ = TEMP2 // (float)
0050: gosub @READ_TEMP1_SIGNEXT_STORETO_TEMP2
0087: 2@ = TEMP2 // (float)
0050: gosub @DRAW
:NEXT_PICKUP        
000A: PTR += 0x20
0029:   PTR >= 0x97D640
004D: jump_if_false @DO_PICKUP
0002: jump @MAIN_LOOP

:READ_TEMP1_SIGNEXT_STORETO_TEMP2  
000A: TEMP1 += 0x2  
0A8D: TEMP2 = read_memory TEMP1 size 2 vp 0
:SIGNEXT 
08B7:   test TEMP2 bit 15
004D: jump_if_false @SIGNEXT2  
0006: TEMP3 = 15
:SIGNEXT0
000A: TEMP3 += 1
08BF: set TEMP2 bit TEMP3
0019:   TEMP3 > 31
004D: jump_if_false @SIGNEXT0
:SIGNEXT2         
0093: TEMP2 = integer TEMP2 to_float
0017: TEMP2 /= 8.0
return

:DRAW
050A: DISTANCE = distance_between_XYZ 0@ 1@ 2@ and_XYZ PLAYA_X PLAYA_Y PLAYA_Z

0006: 21@ = 0xB6FA2C // l=i (int)
for 20@ = 0 to 2
    0007: 10@(20@,1i) = 0.0 // l=i (float)
    for 22@ = 0 to 2
        0087: 3@ = 0@(22@,1i) // l=l (float)
        0A8D: 4@ = read_memory 21@ size 4 vp 0 // _11/_12/_13 _21/_22/_23 _31/_32/_33
        006B: 3@ *= 4@ // l*=l (float)
        000A: 21@ += 0x10 // l+=i (int)
        005B: 10@(20@,1i) += 3@  // l+=l (float)
    end    
    0A8D: 4@ = read_memory 21@ size 4 vp 0 // _41/_42/_43
    000E: 21@ -= 0x2C // l-=i (int)
    005B: 10@(20@,1i) += 4@  // l+=l (float)
end  
0087: 2@ = 12@ // l=l (float)
0007: 0@ = 640.0 // l=i (float)
0007: 1@ = 448.0 // l=i (float) 
006B: 0@ *= 10@ // l*=l (float)
006B: 1@ *= 11@ // l*=l (float)
               
0021:   2@ > 0.0 // l>i (float)
004D: jump_if_false @SKIP_CURRENT

0073: 0@ /= 2@ // l/=l (float)
0073: 1@ /= 2@ // l/=l (float)

0342: set_text_draw_centered 1
081C: draw_text_outline 1 RGBA 0 0 0 255
0340: set_text_draw_RGBA 50 255 50 255
033F: set_text_draw_letter_size 0.125 0.8
0092: DISTANCE = float DISTANCE to_integer
045A: draw_text_1number 0@ 1@ GXT 'NUMBER' number DISTANCE // ~1~

:SKIP_CURRENT
return

0A93: end_custom_thread