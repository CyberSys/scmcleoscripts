{$CLEO}
{$NOSOURCE}

03A4: name_thread 'PLHUD01'

// >>>>>>> number of airports
0006: 9@ = 0 // l=i (int)
0AC6: 0@ = label @AIRPORTS offset
:NUMBER_AIRPORTS_LOOP
0A8D: 1@ = read_memory 0@ size 4 vp 0
8039:   not 1@ == 0 // l==i (int)
004D: jump_if_false @NUMBER_AIRPORTS_LOOP_END
000A: 9@ += 1 // l+=i (int)
000A: 0@ += 24 // l+=i (int)
0A8D: 1@ = read_memory 0@ size 1 vp 0
000A: 0@ += 1 // l+=i (int)
005A: 0@ += 1@  // l+=l (int)
0002: jump @NUMBER_AIRPORTS_LOOP
:NUMBER_AIRPORTS_LOOP_END
0AC6: 0@ = label @_MENUTEXT offset
000A: 0@ += 211 // l+=i (int) !!MENUOFFSET
0AD3: 0@ = format "%d" 9@
000A: 0@ += 3 // l+=i (int)
0A8C: write_memory 0@ size 1 value 0x20 vp 0
// <<<<<<< number of airports

{
NOTES:

  adding runway:
      make sure enough memory is allocated for the shapes

}

0AC8: 0@ = allocate_memory_size 18480 // sizeof(RwD3D9Vertex) (=28) * 4 * runwaycount (=165)
0AC6: 1@ = label @DATA00 offset
0A8C: write_memory 1@ size 4 value 0@ vp 0

0002: jump @HOOKER
:NOMOREHOOKER

const
    OPTIONS = 0@
    _OPTIONS = 1@
end

0006: OPTIONS = 0 // l=i (int)
0AC6: _OPTIONS = label @_OPTIONS offset

0006: 9@ = 0x0 // l=i (int) // hold keypress state
0006: 10@ = 0x79 // l=i (int) // F10
0006: 11@ = 0x27 // l=i (int) // right
0006: 12@ = 0x28 // l=i (int) // down
0006: 13@ = 0x26 // l=i (int) // up
0006: 14@ = 0x25 // l=i (int) // left

:MAIN_LOOP
0001: wait 0

// >>>>>>> keys
0006: 30@ = 0 // l=i (int)
0002: jump @KEYS_LOOP_START
:KEYS_LOOP
08C3: clear 9@ bit 30@
000A: 30@ += 1 // l+=i (int)
001B:   5 > 30@ // i>l (int)
004D: jump_if_false @KEYS_LOOP_END
:KEYS_LOOP_START
0AB0: key_pressed 10@(30@,1i)
004D: jump_if_false @KEYS_LOOP
88B7:   not test 9@ bit 30@
004D: jump_if_false @KEYS_LOOP_END
08BD: set 9@ bit 30@
000A: 30@ += 2 // l+=i (int)
0A8D: OPTIONS = read_memory _OPTIONS size 4 vp 0
08BD: set OPTIONS bit 30@
0A8C: write_memory _OPTIONS size 4 value OPTIONS vp 0
:KEYS_LOOP_END
// <<<<<<< keys

0002: jump @MAIN_LOOP

{$INCLUDE plhud-asm.txt}
{$INCLUDE plhudairports.txt}

:DATA00
{
    stores a pointer to allocated mem for primitives
}
hex
    00 00 00 00
end

:_MENUTEXT
:DATA01
{
    stores menu text to show
    when changing, search for
      '!!MENUOFFSET' in cleo and asm
      and change offsets as needed
}
hex
    "USE THE UP AND DOWN ARROW KEYS"     "~n~"
    "TO BROWSE THIS MENU. _USE THE"      "~n~"
    "LEFT AND RIGHT ARROW KEYS TO"       "~n~"
    "CHANGE VALUES OR ACCEPT."           "~n~"
                                         "~n~"
    "> CONTINUE_____________"            "~n~"
    " _SMART MODE: ~g~ON_~w~"            "~n~"
    " _VIEW DISTANCE: _1500M"            "~n~"
                                         "~n~"
    "v14 ___ runways"                    "~n~"
    00
end

:_OPTIONS
:DATA02
{
    stores options, states, stuffs
      bit 7: show menu?
      bit 6: left arrow pressed?
      bit 5: up arrow pressed?
      bit 4: down arrow pressed?
      bit 3: right arrow pressed?
      bit 2: F10 pressed?
      bit 1: smart mode?
      bit 0: is active?
    key states reset by asm
}
hex
    00 00 00 00
end

:_MENUIDX
:DATA03
{
    currently selected menu idx
}
hex
    00 00 00 00
end

